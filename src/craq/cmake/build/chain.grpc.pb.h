// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chain.proto
// Original file comments:
// Authors: sm106@illinois.edu
//
#ifndef GRPC_chain_2eproto__INCLUDED
#define GRPC_chain_2eproto__INCLUDED

#include "chain.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace chain {

// The greeting service definition.
class ChainImpl final {
 public:
  static constexpr char const* service_full_name() {
    return "chain.ChainImpl";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Put request from the client
    virtual ::grpc::Status Put(::grpc::ClientContext* context, const ::chain::PutArg& request, ::chain::PutRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::PutRet>> AsyncPut(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::PutRet>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::PutRet>> PrepareAsyncPut(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::PutRet>>(PrepareAsyncPutRaw(context, request, cq));
    }
    // Forward the request to next replica in chain
    virtual ::grpc::Status Forward(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::chain::FwdRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::FwdRet>> AsyncForward(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::FwdRet>>(AsyncForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::FwdRet>> PrepareAsyncForward(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::FwdRet>>(PrepareAsyncForwardRaw(context, request, cq));
    }
    // Acknowledgement from tail to client.
    virtual ::grpc::Status Ack(::grpc::ClientContext* context, const ::chain::AckArg& request, ::chain::AckRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::AckRet>> AsyncAck(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::AckRet>>(AsyncAckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::AckRet>> PrepareAsyncAck(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::AckRet>>(PrepareAsyncAckRaw(context, request, cq));
    }
    // Read request.
    virtual ::grpc::Status Get(::grpc::ClientContext* context, const ::chain::GetArg& request, ::chain::GetRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::GetRet>> AsyncGet(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::GetRet>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::GetRet>> PrepareAsyncGet(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chain::GetRet>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Put request from the client
      virtual void Put(::grpc::ClientContext* context, const ::chain::PutArg* request, ::chain::PutRet* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Put(::grpc::ClientContext* context, const ::chain::PutArg* request, ::chain::PutRet* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Forward the request to next replica in chain
      virtual void Forward(::grpc::ClientContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Forward(::grpc::ClientContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Acknowledgement from tail to client.
      virtual void Ack(::grpc::ClientContext* context, const ::chain::AckArg* request, ::chain::AckRet* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ack(::grpc::ClientContext* context, const ::chain::AckArg* request, ::chain::AckRet* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Read request.
      virtual void Get(::grpc::ClientContext* context, const ::chain::GetArg* request, ::chain::GetRet* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Get(::grpc::ClientContext* context, const ::chain::GetArg* request, ::chain::GetRet* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::PutRet>* AsyncPutRaw(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::PutRet>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::FwdRet>* AsyncForwardRaw(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::FwdRet>* PrepareAsyncForwardRaw(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::AckRet>* AsyncAckRaw(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::AckRet>* PrepareAsyncAckRaw(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::GetRet>* AsyncGetRaw(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chain::GetRet>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Put(::grpc::ClientContext* context, const ::chain::PutArg& request, ::chain::PutRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::PutRet>> AsyncPut(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::PutRet>>(AsyncPutRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::PutRet>> PrepareAsyncPut(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::PutRet>>(PrepareAsyncPutRaw(context, request, cq));
    }
    ::grpc::Status Forward(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::chain::FwdRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::FwdRet>> AsyncForward(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::FwdRet>>(AsyncForwardRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::FwdRet>> PrepareAsyncForward(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::FwdRet>>(PrepareAsyncForwardRaw(context, request, cq));
    }
    ::grpc::Status Ack(::grpc::ClientContext* context, const ::chain::AckArg& request, ::chain::AckRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::AckRet>> AsyncAck(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::AckRet>>(AsyncAckRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::AckRet>> PrepareAsyncAck(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::AckRet>>(PrepareAsyncAckRaw(context, request, cq));
    }
    ::grpc::Status Get(::grpc::ClientContext* context, const ::chain::GetArg& request, ::chain::GetRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::GetRet>> AsyncGet(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::GetRet>>(AsyncGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::GetRet>> PrepareAsyncGet(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chain::GetRet>>(PrepareAsyncGetRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Put(::grpc::ClientContext* context, const ::chain::PutArg* request, ::chain::PutRet* response, std::function<void(::grpc::Status)>) override;
      void Put(::grpc::ClientContext* context, const ::chain::PutArg* request, ::chain::PutRet* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Forward(::grpc::ClientContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response, std::function<void(::grpc::Status)>) override;
      void Forward(::grpc::ClientContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Ack(::grpc::ClientContext* context, const ::chain::AckArg* request, ::chain::AckRet* response, std::function<void(::grpc::Status)>) override;
      void Ack(::grpc::ClientContext* context, const ::chain::AckArg* request, ::chain::AckRet* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Get(::grpc::ClientContext* context, const ::chain::GetArg* request, ::chain::GetRet* response, std::function<void(::grpc::Status)>) override;
      void Get(::grpc::ClientContext* context, const ::chain::GetArg* request, ::chain::GetRet* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chain::PutRet>* AsyncPutRaw(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chain::PutRet>* PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chain::FwdRet>* AsyncForwardRaw(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chain::FwdRet>* PrepareAsyncForwardRaw(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chain::AckRet>* AsyncAckRaw(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chain::AckRet>* PrepareAsyncAckRaw(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chain::GetRet>* AsyncGetRaw(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chain::GetRet>* PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Put_;
    const ::grpc::internal::RpcMethod rpcmethod_Forward_;
    const ::grpc::internal::RpcMethod rpcmethod_Ack_;
    const ::grpc::internal::RpcMethod rpcmethod_Get_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Put request from the client
    virtual ::grpc::Status Put(::grpc::ServerContext* context, const ::chain::PutArg* request, ::chain::PutRet* response);
    // Forward the request to next replica in chain
    virtual ::grpc::Status Forward(::grpc::ServerContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response);
    // Acknowledgement from tail to client.
    virtual ::grpc::Status Ack(::grpc::ServerContext* context, const ::chain::AckArg* request, ::chain::AckRet* response);
    // Read request.
    virtual ::grpc::Status Get(::grpc::ServerContext* context, const ::chain::GetArg* request, ::chain::GetRet* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Put() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::chain::PutArg* /*request*/, ::chain::PutRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::chain::PutArg* request, ::grpc::ServerAsyncResponseWriter< ::chain::PutRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Forward() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::chain::FwdArg* /*request*/, ::chain::FwdRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForward(::grpc::ServerContext* context, ::chain::FwdArg* request, ::grpc::ServerAsyncResponseWriter< ::chain::FwdRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Ack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ack() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Ack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ack(::grpc::ServerContext* /*context*/, const ::chain::AckArg* /*request*/, ::chain::AckRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAck(::grpc::ServerContext* context, ::chain::AckArg* request, ::grpc::ServerAsyncResponseWriter< ::chain::AckRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Get() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::chain::GetArg* /*request*/, ::chain::GetRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::chain::GetArg* request, ::grpc::ServerAsyncResponseWriter< ::chain::GetRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Put<WithAsyncMethod_Forward<WithAsyncMethod_Ack<WithAsyncMethod_Get<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Put() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::chain::PutArg, ::chain::PutRet>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chain::PutArg* request, ::chain::PutRet* response) { return this->Put(context, request, response); }));}
    void SetMessageAllocatorFor_Put(
        ::grpc::MessageAllocator< ::chain::PutArg, ::chain::PutRet>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chain::PutArg, ::chain::PutRet>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::chain::PutArg* /*request*/, ::chain::PutRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::chain::PutArg* /*request*/, ::chain::PutRet* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Forward() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::chain::FwdArg, ::chain::FwdRet>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response) { return this->Forward(context, request, response); }));}
    void SetMessageAllocatorFor_Forward(
        ::grpc::MessageAllocator< ::chain::FwdArg, ::chain::FwdRet>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chain::FwdArg, ::chain::FwdRet>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::chain::FwdArg* /*request*/, ::chain::FwdRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Forward(
      ::grpc::CallbackServerContext* /*context*/, const ::chain::FwdArg* /*request*/, ::chain::FwdRet* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Ack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ack() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::chain::AckArg, ::chain::AckRet>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chain::AckArg* request, ::chain::AckRet* response) { return this->Ack(context, request, response); }));}
    void SetMessageAllocatorFor_Ack(
        ::grpc::MessageAllocator< ::chain::AckArg, ::chain::AckRet>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chain::AckArg, ::chain::AckRet>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ack(::grpc::ServerContext* /*context*/, const ::chain::AckArg* /*request*/, ::chain::AckRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ack(
      ::grpc::CallbackServerContext* /*context*/, const ::chain::AckArg* /*request*/, ::chain::AckRet* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Get() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::chain::GetArg, ::chain::GetRet>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chain::GetArg* request, ::chain::GetRet* response) { return this->Get(context, request, response); }));}
    void SetMessageAllocatorFor_Get(
        ::grpc::MessageAllocator< ::chain::GetArg, ::chain::GetRet>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chain::GetArg, ::chain::GetRet>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::chain::GetArg* /*request*/, ::chain::GetRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::chain::GetArg* /*request*/, ::chain::GetRet* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Put<WithCallbackMethod_Forward<WithCallbackMethod_Ack<WithCallbackMethod_Get<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Put() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::chain::PutArg* /*request*/, ::chain::PutRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Forward() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::chain::FwdArg* /*request*/, ::chain::FwdRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Ack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ack() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Ack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ack(::grpc::ServerContext* /*context*/, const ::chain::AckArg* /*request*/, ::chain::AckRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Get() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::chain::GetArg* /*request*/, ::chain::GetRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Put() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::chain::PutArg* /*request*/, ::chain::PutRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPut(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Forward() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::chain::FwdArg* /*request*/, ::chain::FwdRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestForward(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ack() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Ack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ack(::grpc::ServerContext* /*context*/, const ::chain::AckArg* /*request*/, ::chain::AckRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAck(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Get() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::chain::GetArg* /*request*/, ::chain::GetRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Put() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Put(context, request, response); }));
    }
    ~WithRawCallbackMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::chain::PutArg* /*request*/, ::chain::PutRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Put(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Forward() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Forward(context, request, response); }));
    }
    ~WithRawCallbackMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::chain::FwdArg* /*request*/, ::chain::FwdRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Forward(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ack() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ack(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ack(::grpc::ServerContext* /*context*/, const ::chain::AckArg* /*request*/, ::chain::AckRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ack(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Get() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Get(context, request, response); }));
    }
    ~WithRawCallbackMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::chain::GetArg* /*request*/, ::chain::GetRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Get(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Put : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Put() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chain::PutArg, ::chain::PutRet>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chain::PutArg, ::chain::PutRet>* streamer) {
                       return this->StreamedPut(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Put() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Put(::grpc::ServerContext* /*context*/, const ::chain::PutArg* /*request*/, ::chain::PutRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPut(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chain::PutArg,::chain::PutRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Forward : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Forward() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chain::FwdArg, ::chain::FwdRet>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chain::FwdArg, ::chain::FwdRet>* streamer) {
                       return this->StreamedForward(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Forward() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Forward(::grpc::ServerContext* /*context*/, const ::chain::FwdArg* /*request*/, ::chain::FwdRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedForward(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chain::FwdArg,::chain::FwdRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ack : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ack() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chain::AckArg, ::chain::AckRet>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chain::AckArg, ::chain::AckRet>* streamer) {
                       return this->StreamedAck(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ack() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ack(::grpc::ServerContext* /*context*/, const ::chain::AckArg* /*request*/, ::chain::AckRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAck(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chain::AckArg,::chain::AckRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Get : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Get() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chain::GetArg, ::chain::GetRet>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chain::GetArg, ::chain::GetRet>* streamer) {
                       return this->StreamedGet(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Get() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Get(::grpc::ServerContext* /*context*/, const ::chain::GetArg* /*request*/, ::chain::GetRet* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chain::GetArg,::chain::GetRet>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Forward<WithStreamedUnaryMethod_Ack<WithStreamedUnaryMethod_Get<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Put<WithStreamedUnaryMethod_Forward<WithStreamedUnaryMethod_Ack<WithStreamedUnaryMethod_Get<Service > > > > StreamedService;
};

}  // namespace chain


#endif  // GRPC_chain_2eproto__INCLUDED
