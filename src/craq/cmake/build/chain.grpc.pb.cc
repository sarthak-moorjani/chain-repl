// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chain.proto

#include "chain.pb.h"
#include "chain.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace chain {

static const char* ChainImpl_method_names[] = {
  "/chain.ChainImpl/Put",
  "/chain.ChainImpl/Forward",
  "/chain.ChainImpl/Ack",
  "/chain.ChainImpl/Get",
};

std::unique_ptr< ChainImpl::Stub> ChainImpl::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChainImpl::Stub> stub(new ChainImpl::Stub(channel, options));
  return stub;
}

ChainImpl::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Put_(ChainImpl_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Forward_(ChainImpl_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ack_(ChainImpl_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(ChainImpl_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChainImpl::Stub::Put(::grpc::ClientContext* context, const ::chain::PutArg& request, ::chain::PutRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chain::PutArg, ::chain::PutRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Put_, context, request, response);
}

void ChainImpl::Stub::async::Put(::grpc::ClientContext* context, const ::chain::PutArg* request, ::chain::PutRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chain::PutArg, ::chain::PutRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, std::move(f));
}

void ChainImpl::Stub::async::Put(::grpc::ClientContext* context, const ::chain::PutArg* request, ::chain::PutRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Put_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chain::PutRet>* ChainImpl::Stub::PrepareAsyncPutRaw(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chain::PutRet, ::chain::PutArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chain::PutRet>* ChainImpl::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::chain::PutArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPutRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChainImpl::Stub::Forward(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::chain::FwdRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chain::FwdArg, ::chain::FwdRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Forward_, context, request, response);
}

void ChainImpl::Stub::async::Forward(::grpc::ClientContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chain::FwdArg, ::chain::FwdRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Forward_, context, request, response, std::move(f));
}

void ChainImpl::Stub::async::Forward(::grpc::ClientContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Forward_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chain::FwdRet>* ChainImpl::Stub::PrepareAsyncForwardRaw(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chain::FwdRet, ::chain::FwdArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Forward_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chain::FwdRet>* ChainImpl::Stub::AsyncForwardRaw(::grpc::ClientContext* context, const ::chain::FwdArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncForwardRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChainImpl::Stub::Ack(::grpc::ClientContext* context, const ::chain::AckArg& request, ::chain::AckRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chain::AckArg, ::chain::AckRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ack_, context, request, response);
}

void ChainImpl::Stub::async::Ack(::grpc::ClientContext* context, const ::chain::AckArg* request, ::chain::AckRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chain::AckArg, ::chain::AckRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ack_, context, request, response, std::move(f));
}

void ChainImpl::Stub::async::Ack(::grpc::ClientContext* context, const ::chain::AckArg* request, ::chain::AckRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chain::AckRet>* ChainImpl::Stub::PrepareAsyncAckRaw(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chain::AckRet, ::chain::AckArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ack_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chain::AckRet>* ChainImpl::Stub::AsyncAckRaw(::grpc::ClientContext* context, const ::chain::AckArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAckRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChainImpl::Stub::Get(::grpc::ClientContext* context, const ::chain::GetArg& request, ::chain::GetRet* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chain::GetArg, ::chain::GetRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void ChainImpl::Stub::async::Get(::grpc::ClientContext* context, const ::chain::GetArg* request, ::chain::GetRet* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chain::GetArg, ::chain::GetRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void ChainImpl::Stub::async::Get(::grpc::ClientContext* context, const ::chain::GetArg* request, ::chain::GetRet* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chain::GetRet>* ChainImpl::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chain::GetRet, ::chain::GetArg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chain::GetRet>* ChainImpl::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::chain::GetArg& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChainImpl::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChainImpl_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChainImpl::Service, ::chain::PutArg, ::chain::PutRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChainImpl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chain::PutArg* req,
             ::chain::PutRet* resp) {
               return service->Put(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChainImpl_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChainImpl::Service, ::chain::FwdArg, ::chain::FwdRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChainImpl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chain::FwdArg* req,
             ::chain::FwdRet* resp) {
               return service->Forward(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChainImpl_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChainImpl::Service, ::chain::AckArg, ::chain::AckRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChainImpl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chain::AckArg* req,
             ::chain::AckRet* resp) {
               return service->Ack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChainImpl_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChainImpl::Service, ::chain::GetArg, ::chain::GetRet, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChainImpl::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chain::GetArg* req,
             ::chain::GetRet* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
}

ChainImpl::Service::~Service() {
}

::grpc::Status ChainImpl::Service::Put(::grpc::ServerContext* context, const ::chain::PutArg* request, ::chain::PutRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChainImpl::Service::Forward(::grpc::ServerContext* context, const ::chain::FwdArg* request, ::chain::FwdRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChainImpl::Service::Ack(::grpc::ServerContext* context, const ::chain::AckArg* request, ::chain::AckRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChainImpl::Service::Get(::grpc::ServerContext* context, const ::chain::GetArg* request, ::chain::GetRet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chain

